---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
  namespace: {{ .Release.Namespace }}
data:
  ASPNETCORE_ENVIRONMENT: Production
  globalSettings__selfHosted: "true"
  globalSettings__pushRelayBaseUri: "{{ .Values.global.globalSettings__pushRelayBaseUri }}"
  keyConnectorSettings__webVaultUri: "{{ .Values.global.globalSettings__pushRelayBaseUri }}"
  keyConnectorSettings__identityServerUri: "http://{{ .Release.Name }}-identity.{{ .Release.Namespace }}:5000"
  globalSettings__baseServiceUri__vault: "{{ .Values.scheme }}://{{ .Values.domain }}"
  globalSettings__yubico__clientId: "{{ .Values.global.globalSettings__yubico__clientId }}"
  globalSettings__yubico__key: "{{ .Values.global.globalSettings__yubico__key }}"
  globalSettings__mail__replyToEmail: "{{ .Values.global.globalSettings__mail__replyToEmail }}"
  globalSettings__mail__smtp__host: "{{ .Values.global.globalSettings__mail__smtp__host }}"
  globalSettings__mail__smtp__port: "{{ .Values.global.globalSettings__mail__smtp__port }}"
  globalSettings__mail__smtp__ssl: "{{ .Values.global.globalSettings__mail__smtp__ssl }}"
  globalSettings__disableUserRegistration: "{{ .Values.global.globalSettings__disableUserRegistration }}"
  globalSettings__hibpApiKey: "{{ .Values.global.globalSettings__hibpApiKey }}"
  default.conf: |
    server {
      listen 8080 default_server;
      listen [::]:8080 default_server;
      server_name _;

      return 301 https://$host$request_uri;
    }

    server {
      listen 8443 ssl http2;
      listen [::]:8443 ssl http2;
      server_name _;

      ssl_certificate /etc/ssl/bitwarden/client/tls.crt;
      ssl_certificate_key /etc/ssl/bitwarden/client/tls.key;
      ssl_session_timeout 30m;
      ssl_session_cache shared:SSL:20m;
      ssl_session_tickets off;

      ssl_protocols TLSv1.2;
      ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256";
      # Enables server-side protection from BEAST attacks
      ssl_prefer_server_ciphers on;

      # OCSP Stapling ---
      # Fetch OCSP records from URL in ssl_certificate and cache them
      ssl_stapling on;
      ssl_stapling_verify on;

      # Verify chain of trust of OCSP response using Root CA and Intermediate certs
      ssl_trusted_certificate /etc/ssl/bitwarden/ca/tls.crt;

      include /etc/nginx/security-headers-ssl.conf;
      include /etc/nginx/security-headers.conf;

      location / {
        proxy_pass http://{{ .Release.Name }}-web.{{ .Release.Namespace }}:5000/;
        include /etc/nginx/security-headers-ssl.conf;
        include /etc/nginx/security-headers.conf;
        add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https://haveibeenpwned.com https://www.gravatar.com; child-src 'self' https://*.duosecurity.com https://*.duofederal.com; frame-src 'self' https://*.duosecurity.com https://*.duofederal.com; connect-src 'self' wss://{{ .Values.domain }} https://api.pwnedpasswords.com https://2fa.directory; object-src 'self' blob:;";
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Robots-Tag "noindex, nofollow";
      }

      location /alive {
        return 200 'alive';
        add_header Content-Type text/plain;
      }

      location = /app-id.json {
        proxy_pass http://{{ .Release.Name }}-web.{{ .Release.Namespace }}:5000/app-id.json;
        include /etc/nginx/security-headers-ssl.conf;
        include /etc/nginx/security-headers.conf;
        proxy_hide_header Content-Type;
        add_header Content-Type $fido_content_type;
      }

      location = /duo-connector.html {
        proxy_pass http://{{ .Release.Name }}-web.{{ .Release.Namespace }}:5000/duo-connector.html;
      }

      location = /webauthn-connector.html {
        proxy_pass http://{{ .Release.Name }}-web.{{ .Release.Namespace }}:5000/webauthn-connector.html;
      }

      location = /webauthn-fallback-connector.html {
        proxy_pass http://{{ .Release.Name }}-web.{{ .Release.Namespace }}:5000/webauthn-fallback-connector.html;
      }

      location = /sso-connector.html {
        proxy_pass http://{{ .Release.Name }}-web.{{ .Release.Namespace }}:5000/sso-connector.html;
      }


      location /attachments/ {
        proxy_pass http://{{ .Release.Name }}-attachments.{{ .Release.Namespace }}:5000/;
      }

      location /api/ {
        proxy_pass http://{{ .Release.Name }}-api.{{ .Release.Namespace }}:5000/;
      }

      location /icons/ {
        proxy_pass http://{{ .Release.Name }}-icons.{{ .Release.Namespace }}:5000/;
      }

      location /notifications/ {
        proxy_pass http://{{ .Release.Name }}-notifications.{{ .Release.Namespace }}:5000/;
      }

      location /notifications/hub {
        proxy_pass http://{{ .Release.Name }}-notifications.{{ .Release.Namespace }}:5000/hub;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
      }

      location /events/ {
        proxy_pass http://{{ .Release.Name }}-events.{{ .Release.Namespace }}:5000/;
      }

      location /sso {
        proxy_pass http://{{ .Release.Name }}-sso.{{ .Release.Namespace }}:5000;
        include /etc/nginx/security-headers-ssl.conf;
        include /etc/nginx/security-headers.conf;
        add_header X-Frame-Options SAMEORIGIN;
      }

      location /identity {
        proxy_pass http://{{ .Release.Name }}-identity.{{ .Release.Namespace }}:5000;
        include /etc/nginx/security-headers-ssl.conf;
        include /etc/nginx/security-headers.conf;
        add_header X-Frame-Options SAMEORIGIN;
      }

      location /admin {
        proxy_pass http://{{ .Release.Name }}-admin.{{ .Release.Namespace }}:5000;
        include /etc/nginx/security-headers-ssl.conf;
        include /etc/nginx/security-headers.conf;
        add_header X-Frame-Options SAMEORIGIN;
      }

    }
